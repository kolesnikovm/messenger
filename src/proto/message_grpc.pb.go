// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendMessageClient, error)
	GetMessage(ctx context.Context, in *MessaggeRequest, opts ...grpc.CallOption) (Messenger_GetMessageClient, error)
	GetMessageHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	ReadMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_ReadMessageClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], "/Messenger/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSendMessageClient{stream}
	return x, nil
}

type Messenger_SendMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerSendMessageClient struct {
	grpc.ClientStream
}

func (x *messengerSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerSendMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) GetMessage(ctx context.Context, in *MessaggeRequest, opts ...grpc.CallOption) (Messenger_GetMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[1], "/Messenger/GetMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerGetMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_GetMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerGetMessageClient struct {
	grpc.ClientStream
}

func (x *messengerGetMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) GetMessageHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/Messenger/GetMessageHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) ReadMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_ReadMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[2], "/Messenger/ReadMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerReadMessageClient{stream}
	return x, nil
}

type Messenger_ReadMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerReadMessageClient struct {
	grpc.ClientStream
}

func (x *messengerReadMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerReadMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations should embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	SendMessage(Messenger_SendMessageServer) error
	GetMessage(*MessaggeRequest, Messenger_GetMessageServer) error
	GetMessageHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	ReadMessage(Messenger_ReadMessageServer) error
}

// UnimplementedMessengerServer should be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) SendMessage(Messenger_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessengerServer) GetMessage(*MessaggeRequest, Messenger_GetMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessengerServer) GetMessageHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHistory not implemented")
}
func (UnimplementedMessengerServer) ReadMessage(Messenger_ReadMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).SendMessage(&messengerSendMessageServer{stream})
}

type Messenger_SendMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messengerSendMessageServer struct {
	grpc.ServerStream
}

func (x *messengerSendMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_GetMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessaggeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).GetMessage(m, &messengerGetMessageServer{stream})
}

type Messenger_GetMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messengerGetMessageServer struct {
	grpc.ServerStream
}

func (x *messengerGetMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messenger_GetMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).GetMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Messenger/GetMessageHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).GetMessageHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_ReadMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).ReadMessage(&messengerReadMessageServer{stream})
}

type Messenger_ReadMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messengerReadMessageServer struct {
	grpc.ServerStream
}

func (x *messengerReadMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerReadMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageHistory",
			Handler:    _Messenger_GetMessageHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Messenger_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMessage",
			Handler:       _Messenger_GetMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadMessage",
			Handler:       _Messenger_ReadMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
