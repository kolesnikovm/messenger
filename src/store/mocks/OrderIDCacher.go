// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderIDCacher is an autogenerated mock type for the OrderIDCacher type
type MockOrderIDCacher struct {
	mock.Mock
}

type MockOrderIDCacher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderIDCacher) EXPECT() *MockOrderIDCacher_Expecter {
	return &MockOrderIDCacher_Expecter{mock: &_m.Mock}
}

// GetLastMessageOrderID provides a mock function with given fields: ctx, chatID
func (_m *MockOrderIDCacher) GetLastMessageOrderID(ctx context.Context, chatID string) (uint64, error) {
	ret := _m.Called(ctx, chatID)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderIDCacher_GetLastMessageOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastMessageOrderID'
type MockOrderIDCacher_GetLastMessageOrderID_Call struct {
	*mock.Call
}

// GetLastMessageOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
func (_e *MockOrderIDCacher_Expecter) GetLastMessageOrderID(ctx interface{}, chatID interface{}) *MockOrderIDCacher_GetLastMessageOrderID_Call {
	return &MockOrderIDCacher_GetLastMessageOrderID_Call{Call: _e.mock.On("GetLastMessageOrderID", ctx, chatID)}
}

func (_c *MockOrderIDCacher_GetLastMessageOrderID_Call) Run(run func(ctx context.Context, chatID string)) *MockOrderIDCacher_GetLastMessageOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderIDCacher_GetLastMessageOrderID_Call) Return(_a0 uint64, _a1 error) *MockOrderIDCacher_GetLastMessageOrderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderIDCacher_GetLastMessageOrderID_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *MockOrderIDCacher_GetLastMessageOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastMessageOrderID provides a mock function with given fields: ctx, chatID, orderID
func (_m *MockOrderIDCacher) SetLastMessageOrderID(ctx context.Context, chatID string, orderID uint64) error {
	ret := _m.Called(ctx, chatID, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, chatID, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderIDCacher_SetLastMessageOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastMessageOrderID'
type MockOrderIDCacher_SetLastMessageOrderID_Call struct {
	*mock.Call
}

// SetLastMessageOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID string
//   - orderID uint64
func (_e *MockOrderIDCacher_Expecter) SetLastMessageOrderID(ctx interface{}, chatID interface{}, orderID interface{}) *MockOrderIDCacher_SetLastMessageOrderID_Call {
	return &MockOrderIDCacher_SetLastMessageOrderID_Call{Call: _e.mock.On("SetLastMessageOrderID", ctx, chatID, orderID)}
}

func (_c *MockOrderIDCacher_SetLastMessageOrderID_Call) Run(run func(ctx context.Context, chatID string, orderID uint64)) *MockOrderIDCacher_SetLastMessageOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *MockOrderIDCacher_SetLastMessageOrderID_Call) Return(_a0 error) *MockOrderIDCacher_SetLastMessageOrderID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderIDCacher_SetLastMessageOrderID_Call) RunAndReturn(run func(context.Context, string, uint64) error) *MockOrderIDCacher_SetLastMessageOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderIDCacher creates a new instance of MockOrderIDCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderIDCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderIDCacher {
	mock := &MockOrderIDCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
