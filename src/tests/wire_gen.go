// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package tests

import (
	"github.com/kolesnikovm/messenger/configs"
	"github.com/kolesnikovm/messenger/di"
	"github.com/kolesnikovm/messenger/notifier/mocks"
	"github.com/kolesnikovm/messenger/server/grpc"
	"github.com/kolesnikovm/messenger/server/grpc/interceptors"
	"github.com/kolesnikovm/messenger/server/grpc/messenger"
	mocks2 "github.com/kolesnikovm/messenger/store/mocks"
	"github.com/kolesnikovm/messenger/usecase/message"
	"testing"
)

// Injectors from wire.go:

func InitializeSuite(t *testing.T, conf configs.ServerConfig) (*Suite, func(), error) {
	mockMessageSender := mocks.ProvideNotifier(t)
	mockMessages := mocks2.ProvideStore(t)
	messageUseCase := message.New(mockMessageSender, mockMessages)
	handler := messenger.NewHandler(messageUseCase)
	streamServerInterceptor := interceptors.NewStreamInterceptor()
	unaryServerInterceptor := interceptors.NewUnaryInterceptor()
	serverBuilder := grpc.ServerBuilder{
		MessengerServer:   handler,
		StreamInterceptor: streamServerInterceptor,
		UnaryInterceptor:  unaryServerInterceptor,
	}
	server := di.ProvideServer(serverBuilder)
	clientConn, cleanup, err := ProvideConnection(t, server)
	if err != nil {
		return nil, nil, err
	}
	messengerClient := newClient(clientConn)
	archiver, cleanup2, err := di.ProvideArchiver(conf, mockMessages)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	suite := &Suite{
		grpcServer:             server,
		messengerServiceClient: messengerClient,
		conn:                   clientConn,
		messageSender:          mockMessageSender,
		messageStore:           mockMessages,
		archiver:               archiver,
		t:                      t,
	}
	return suite, func() {
		cleanup2()
		cleanup()
	}, nil
}
